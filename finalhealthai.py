# -*- coding: utf-8 -*-
"""finalhealthai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gx2JIjTCuqp-1Z1jFCdo8t5BI0KOMB4I
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Fast response function
def generate_response(prompt, max_length=250):   # reduced max_length for speed
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            do_sample=True,
            temperature=0.7,
            top_p=0.9,
            num_beams=1,
            early_stopping=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.strip()

# Disease prediction
def disease_prediction(symptoms):
    prompt = f"Symptoms: {symptoms}\nPossible conditions (short):"
    return generate_response(prompt, max_length=200)

# Treatment plan
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Condition: {condition}\nAge: {age}\nGender: {gender}\nHistory: {medical_history}\nQuick treatment suggestions:"
    return generate_response(prompt, max_length=200)

# ‚úÖ Chat function (for Gradio)
def patient_chat(chat_history, user_input):
    if not chat_history:
        chat_history = ""
    conversation = chat_history + f"\nPatient: {user_input}\nAI:"
    response = generate_response(conversation, max_length=150)
    chat_history += f"\nPatient: {user_input}\nAI: {response}"
    return chat_history

# ‚úÖ Gradio app
with gr.Blocks() as app:
    gr.Markdown("# ü©∫ HealthCare AI Assistant ")
    gr.Markdown("‚ö†Ô∏è Informational only. Always consult a doctor.")

    with gr.Tabs():
        with gr.TabItem("Chat"):
            chat_history = gr.Textbox(label="Conversation", lines=10, value="", interactive=False)
            user_input = gr.Textbox(label="Your Message")
            send_btn = gr.Button("Send")
            send_btn.click(patient_chat, inputs=[chat_history, user_input], outputs=chat_history)

        with gr.TabItem("Disease Prediction"):
            symptoms_input = gr.Textbox(label="Enter Symptoms")
            predict_btn = gr.Button("Analyze")
            prediction_output = gr.Textbox(label="Prediction", lines=10)
            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plan"):
            condition_input = gr.Textbox(label="Condition")
            age_input = gr.Number(label="Age", value=30)
            gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
            history_input = gr.Textbox(label="Medical History")
            plan_btn = gr.Button("Generate Plan")
            plan_output = gr.Textbox(label="Plan", lines=10)
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

app.launch(share=True)